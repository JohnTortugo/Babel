Program Units (declaration + body)
	-> Subprograms
		-> Procedures
		-> Functions
	-> Packages




Ada as a language permits a great deal of freedom, but some consistency of
capitalization and indentation are helpful for reading later. The style used in
this tutorial is the style suggested in the Software Productivity Consortia's
(SPC) Ada Quality and Style: A Guide to Professional Programmers (which is the
recommended style guide by the Ada Joint Program Office). In this style
keywords are in lower case, identifiers have initial capitals, and there is at
most one statement per line. If an identifier has more than one word in it,
each word should have an initial capital letter and the words should have
underscores (``_'') between them.

To make long numbers easier to read, underscores are permitted inside a numeric
literal. For example, "1_000_000" is legal. This is similar to the way commas
are used in the United States and periods are used in Europe. Underscores
aren't allowed to be consecutive, numbers may not end in an underscore, and
underscores don't change the value of a number.


A useful Ada capability is its ability to write out literals in other bases
from 2 to 16 (C has this capability to a lessor extent as well). These are
called, reasonably enough, based literals. To create a based literal, write out
the desired base, a "#" sign, the number in the requested base, and another "#"
sign. For example, "2#1001_1000#" is a base 2 number equal to 128+16+8 = 152.

To include a double quote character in a string, type it twice ("") inside the
larger string. Thus "Hello" is a string, as is "She said, ""How are you?""". 

We'll find out later how to represent control characters, but for now we'll
note that C-like escape characters do not work. You can do the same thing in
Ada but in a different way, and because of the way Ada works they aren't used
as often.

Ada guarantees that an Integer can store numbers between -32767 and 32767
(inclusive); an Integer is likely to have a wider range. In other words, an
Integer type must use at least 16 bits, but the actual number of bits used will
depend on the compiler and machine.

A key difference between Ada and some other languages (such as C and C++) is
what happens when an evaluation cannot be completed. If a division by zero is
attempted, or an expression result is too large, Ada will normally raise an
exception. Exceptions can be handled, but if they aren't, the program will halt
(with some debugging output to help identify the kind and location of the
problem). This means that instead of silently giving wrong answers, Ada
programs normally will halt when a computation cannot be completed. This
simplifies debugging.

Unlike C or C++, but like Pascal and many other languages, Integers are not
considered the same as True or False.

The main difference between a procedure and function is that a function returns
a value, while a procedure does not (though a procedure can change the values
of parameters sent to it).


Data Types
--------------

Ada insists that types be correct in operations, and there aren't any
predefined operations for mixing Integer and Float using +, -, *, or /. Thus,
if you're using an Integer and Float together, put a function called `Float()'
around the Integer variables to cause them to be converted into floating-point
values. This makes it clear when such conversions are taking place, which is
sometimes important in understanding what a program is doing. Also, whenever
you set a Float to a constant, the constant must be written with a period in
it, or the compiler will complain.









